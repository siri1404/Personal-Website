/*!
 * Pooja Kanala Portfolio JS v1.0.0
 * (c) 2024 Pooja Kanala | MIT License
 * A simple, readable base for portfolio interactivity.
 */
(function(window, document) {
    "use strict";

    // Utility functions
    function isFunction(obj) {
        return typeof obj === "function";
    }

    function isArray(obj) {
        return Array.isArray(obj);
    }

    function forEach(arr, callback) {
        if (isArray(arr)) {
            for (let i = 0; i < arr.length; i++) {
                if (callback.call(arr[i], i, arr[i]) === false) break;
            }
        }
        return arr;
    }

    function extend(target, ...sources) {
        sources.forEach(source => {
            for (let key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key];
                }
            }
        });
        return target;
    }

    // Main Portfolio object
    function PoojaPortfolio(selector) {
        if (!(this instanceof PoojaPortfolio)) {
            return new PoojaPortfolio(selector);
        }
        if (!selector) {
            this.elements = [];
        } else if (typeof selector === "string") {
            this.elements = Array.from(document.querySelectorAll(selector));
        } else if (selector.nodeType) {
            this.elements = [selector];
        } else if (isArray(selector)) {
            this.elements = selector;
        } else {
            this.elements = [];
        }
    }

    PoojaPortfolio.prototype = {
        each: function(callback) {
            return forEach(this.elements, callback);
        },
        addClass: function(className) {
            this.each(function() {
                this.classList.add(className);
            });
            return this;
        },
        removeClass: function(className) {
            this.each(function() {
                this.classList.remove(className);
            });
            return this;
        },
        toggleClass: function(className) {
            this.each(function() {
                this.classList.toggle(className);
            });
            return this;
        },
        on: function(event, handler) {
            this.each(function() {
                this.addEventListener(event, handler);
            });
            return this;
        },
        css: function(styles) {
            this.each(function() {
                for (let prop in styles) {
                    this.style[prop] = styles[prop];
                }
            });
            return this;
        },
        html: function(content) {
            if (content === undefined) {
                return this.elements[0] ? this.elements[0].innerHTML : "";
            }
            this.each(function() {
                this.innerHTML = content;
            });
            return this;
        },
        text: function(content) {
            if (content === undefined) {
                return this.elements[0] ? this.elements[0].textContent : "";
            }
            this.each(function() {
                this.textContent = content;
            });
            return this;
        },
        attr: function(name, value) {
            if (value === undefined) {
                return this.elements[0] ? this.elements[0].getAttribute(name) : undefined;
            }
            this.each(function() {
                this.setAttribute(name, value);
            });
            return this;
        }
    };

    // Static utility methods
    PoojaPortfolio.extend = extend;
    PoojaPortfolio.isFunction = isFunction;
    PoojaPortfolio.isArray = isArray;

    // Expose as global
    window.Pooja = PoojaPortfolio;

})(window, document);
